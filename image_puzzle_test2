import cv2
import numpy as np
import random

original_image = cv2.imread('image.jpg')
height, width, _ = original_image.shape

rows = 3
cols = 4

def split_image(image, rows, cols):
    block_height = image.shape[0] 
    block_width = image.shape[1] 
    blocks = []
    for r in range(rows):
        for c in range(cols):
            block = image[r*block_height:(r+1)*block_height, c*block_width:(c+1)*block_width].copy()
            blocks.append(block)
    return blocks

def shuffle_blocks(blocks):
    random.shuffle(blocks)
    return blocks

def display_shuffled_blocks(blocks, rows, cols):
    shuffled_image = np.zeros_like(original_image)
    block_height = shuffled_image.shape[0] 
    block_width = shuffled_image.shape[1] 
    index = 0
    for r in range(rows):
        for c in range(cols):
            shuffled_image[r*block_height:(r+1)*block_height, c*block_width:(c+1)*block_width] = blocks[index]
            index += 1
    cv2.imshow('Memory Game', shuffled_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def check_blocks(blocks):
    original_index = 0
    for block in blocks:
        if not np.array_equal(block, original_image[original_index // cols * block.shape[0]:(original_index // cols + 1) * block.shape[0], original_index % cols * block.shape[1]:(original_index % cols + 1) * block.shape[1]]):
            return False
        original_index += 1
    return True

if _name_ == "_main_":
    print("Welcome to Memory Game!")
    print("Try to recreate the original image by moving the blocks.")
    
    blocks = split_image(original_image, rows, cols)
    shuffled_blocks = shuffle_blocks(blocks)
    display_shuffled_blocks(shuffled_blocks, rows, cols)
    
    while not check_blocks(shuffled_blocks):
        print("The image is not correctly reconstructed. Try again!")
        shuffled_blocks = shuffle_blocks(blocks)
        display_shuffled_blocks(shuffled_blocks, rows, cols)
    
    print("Congratulations! You have successfully reconstructed the originalÂ image.")
